# # NGINX - SERVER
# # nginx is an HTTP and reverse proxy server, a mail proxy server and a mail proxy server, and a generic TCP/UDP proxy server

# FROM debian:buster

# RUN apt update -yq \
# 	&& apt-get upgrade -yq \
# 	&& apt install nginx -yq


# #generate certificate with openSSL
# RUN mkdir -p /etc/nginx/ssl \
# 	&& apt-get install openssl -yq \
# 	&& chmod 755 /etc/nginx/ssl

# #req : we want to use tge tool for creating a certificate signing request (CSR) or  self signed X.509 certificate

# #new: This option is used to create a new CSR or self-signed certificate.

# #nodes: This option tells OpenSSL not to encrypt the private key that is generated. This means that the private key will not be protected by a passphrase and anyone with access to the key file will be able to read it.

# #x509: This option specifies that we want to create a self-signed X.509 certificate rather than a certificate signing request (CSR).

# #newkey rsa:2048: This option generates a new RSA key pair with a key size of 2048 bits. The private key is not encrypted, as specified by the -nodes option.

# #out /etc/nginx/ssd/42_inception.crt: This option specifies the output file where the generated certificate will be saved. In this case, the file is /etc/nginx/ssd/42_inception.crt

# #keyout /etc/: This option specifies the output file where the generated private key will be saved. 

# #subj argument is used to specify the subject information for the certificate, including various fields such as country name, state or province name, locality name, organization name, organizational unit name, common name, and other fields that can be included depending on the certificate's purpose.
# RUN openssl req\
# 			-new\
# 			-nodes\
# 			-x509\
# 			-newkey rsa:2048\
# 			-out /etc/nginx/ssl/42_inception.crt\
# 			-keyout /etc/nginx/ssl/42_inception.key\
# 			-subj "/C=FR/ST=IDF/L=Paris/O=42/OU=School42/CN=ccalas.42.fr/UID=ccalas"


# RUN	chmod 755 /var/www/html \
#     && chown -R www-data:www-data /var/www/html

# EXPOSE 443

# COPY conf/nginx.conf /etc/nginx/nginx.conf

# #the daemon off; directive tells Nginx to stay in the foreground. For containers this is useful as best practice is for one container = one process. One server (container) has only one service.
# CMD ["nginx",  "-g",  "daemon off;"]





# #image built from...
# FROM debian:buster

# #update cash and install ngnix with the status check after
# RUN apt-get update && apt-get upgrade -y
# RUN apt-get install nginx -y

# #install openssl and generating a self certificate
# RUN mkdir -p /etc/nginx/ssl
# RUN apt-get install openssl -y
# RUN openssl req\
# 	-new\
# 	-nodes\
# 	-x509\ 
# 	-newkey	rsa:2048\ 
# 	-out /etc/nginx/ssl/inception.crt\ 
# 	-keyout /etc/nginx/ssl/inception.key\ 
# 	-subj "/C=FR/ST=IDF/L=Paris/O=42/OU=Shool 42/CN=masamoil.42.fr/UID=masamoil"

# RUN mkdir -p /var/www/html
# #RUN mkdir -p /var/run/nginx

# COPY conf/nginx.conf /etc/nginx/conf.d/nginx.conf

# RUN chmod -R 755 /var/www/html 
# RUN chown -R www-data:www-data /var/www/html

# #open the port 443
# EXPOSE 443

# ENTRYPOINT ["nginx", "-g", "daemon off;" ]


# FROM : l'image que vous allez utiliser comme base pour la creation de notre image
FROM debian:buster

# Ensuite, utilisez l'instruction RUN pour exécuter une commande dans votre conteneur.
# Limitez au maximum le nombre d'instructions RUN, afin de limiter le nombre de layers créées, et donc de réduire la taille de notre image Docker.
RUN     apt update -yq \
        && apt upgrade -y \
        && apt install nginx -y

# installation TLS / SSL
# 1) get openssl pkg
# 2) .
# 3) generate key and certificate files
#clear apt pkg list
RUN     apt install openssl -y \
        && mkdir -p /etc/nginx/ssl \
        && openssl req -x509 -nodes \
            -out /etc/nginx/ssl/nginx-selfsigned.crt \
            -keyout /etc/nginx/ssl/nginx-selfsigned.key \
            -subj "/C=FR/L=Paris/O=42School/CN=vnafissi.42.fr/" \
        && apt-get clean -y 

RUN     chmod 755 /etc/nginx/ssl

# modification des droits pour avoir accès au root principal et à l'utilisateur principal)
#on va déclarer l'utilisateur www-data comme propriétaire de ce dossier. Il s'agit de l'utilisateur par défaut de Nginx 
RUN     chmod 755 /var/www/html \
        && chown -R www-data:www-data /var/www/html

# Copy conf file in the container created. it replaces the default existing nginx conf file
COPY    ./conf/nginx.conf /etc/nginx/nginx.conf

# L'instruction EXPOSE permet d'indiquer le port sur lequel votre application écoute.
# EXPOSE ne rend pas les ports du conteneur accessibles à l'hôte, il expose le port spécifié et le rend disponible uniquement pour la communication entre conteneurs
# Note : Pour que le serveur WordPress puisse communiquer avec le conteneur MariaDB, il est important que les deux conteneurs soient exécutés dans le même réseau docker.
EXPOSE 443

# L'instruction VOLUME permet d'indiquer quel répertoire vous voulez partager avec votre host.
# VOLUME /app/logs

#CMD ou ENTRYPOINT doit toujours etre present. exécute une commande lors du demarrage du conteneur.
ENTRYPOINT [ "nginx", "-g", "daemon off;" ]